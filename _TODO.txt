FEATURES/BUGS
--------------

make a real check for nonengine->is_ready

build the complete project base path on generate

don't create some plumbing rules if nonmixer has autoconnect on

regularly ping mixers in Live mode

can we get non-mixer channel meter info from osc ?
	> doable but not implemented
bug non-mixer with autoroute from multiple auxes, not coherent routes even if snapshot file says it correctly
bug non-mixer when adding a new aux before an existing aux, will also autoconnect to same ports

JPMIDI : ("channels") ne me liste pas les tracks qui ne contiennent QUE des PC, vérifier si il les envoi

add option to route individual ins to outs (update livescreens)

add a midi learn page to map osc.csv
	>maybe add an ID to osc lines, and create a midimap.csv

vérifier les TODO

write a list of perl dependencies

change grep (wav;mid..etc) in song check to a global definition list

unrelated : record an OSC flow into midi file meta events, so we can keep jack sync.

ENHANCEMENTS
-------------
on personal submix remotes, add "save global preset" & "save song preset"
if midi strip has more than one channel, we should create a merger with mididings ?
dummy song & ecacfg , examples in astrux folder for project creation

add Netjack ports to enable remote audio boxes.

modifier jack_smf-player pour créer un port midi par piste avec le nom de la piste ?
	> si je l aisse tomber jpmidi, on ne peut plus causer en tcp, ca passe par une shell... ou un fork
	> pour connecter en plumbing, le player n'utilise que les numéros de tracks
		> utilsier un script perl avec MIDI:: qui détermine le nom de la piste/numéro ?

create a lscp perl module
	> get_inputs, get_outputs, is_valid...etc
	> wait for new cli ?

change getnextCC > getavailableCC with a table (in case some effect gets removed)

intégrer player type vidéo avec xjadeo

modifier jack.plumbing pour qu'il prenne par défaut une définition dans le dossier courant. Ainsi je peux créer une définition par projet.
	> pour l'instant il faut copier le fichier généré dans le projet vers le dossier home

l'idée de nama d'avoir GIT pour le suivi des fichiers est bonne.

user admin en ssh pour relancer les processus plantés, lance auto un menu script.
Interface d'administration html pour compatibilité maximale

sauvegarder systématiquement les réglages de tranches individuelles dans des fichiers ecasound_fx. (nommer l'effet courant en trackn_current.efx par exemple) Ainsi on peut avoir une option pour activer/désactiver totalement les effets, sans perdre les réglages. Il convient de vérifier que ce processus ne nécessite pas de désactiver la chain actuellement connectée pour éviter les plop/drop sur les autres tranches. Ca permet aussi de gérer des presets d'effets sélectionnables.

consistency check : script qui va venir vérifier que les fichiers de définitions sont cohérent de haut en bas.

Debug alarms : alarmes audio sur un piste à définir pour annoncer des problèmes internes

pour le suivi d'enveloppe (charley ouvert/fermé) il y a un objet [env~] dans pure data qui amrche bien !

integrate NSM support