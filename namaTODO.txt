********************
TYPOS
********************

Description: Add an effect prefader (before vol/pan controls) to the current track. Remove effects with reove_effect.
>> remove

startup screen missing space

********************
TO BE TESTED
********************
+ OSC commands
	>Now if you want to execute the command "command arg1 arg2",
	>just send the OSC packet: "/command/arg1/arg2","dummy".
	osc port defined in namarc, please confirm that nama is responding to the sender using the same port
+ automatic fadein/fadeout on start/stop, Can i shorten it ?
	in .namarc, set
	fade_time: 0.2
	fade_resolution: 100 # steps per second, may help with crackle
+ tcp socket is not closed after a reply is received
+ multiple engines
	verify side effects (not killing all on exit for example)
+ option at startup to set a specific namarc file
	--config

********************
 IDEAS
********************
+ Multiple sources and/or multiple sends per track
+ For MIDI, I'm interested and ready to help.
+ Automation
	That would go with storing and replaying MIDI/OSC packets.
+ Future interface development
	1) update TK interface
	2) make a wex interface
+ audio feedback
	>And a fifth that I forgot to mention: the user could get a
	>mix with audio feedback to typed commands, allowing use
	>without a display at all.
	I had the idea to create a "system track" to play system message to specific musicians interested in knowing what's gonin on in the box when it has no diplay. It is mentioned in my worlflow chart.
+ addressing individual effects in regular setups 
	we could have shortcuts, allowing you to use mic1:reverb or mic1:Eq instead of AM and AN.
+ update auto completion to filter parameters based on first command
+ switchover between two ecasound processes?
	usefull to preload/preconnect large setups, and allow fast conttext switching
+ intergrate the nama terminal in a text frame when i gui mode
+ ecasound effect chains with midi assignations (missing good OSC support==)
	Sounds like you want to associate a midi channel. with an effect parameter.
		add_km reverb delay 0:16
	Add a midi controller on channel 0:16 to the delay parameter of the current tracks's reverb effect.
	Add list_km would be very usefull too. Listing all km defined, order either by midi CC/channel or by track/effect.
	With that, I suppose one would want this:
		show_km reverb delay 0:16
	this would transform this user friendly command to the km:2,0,100,0,16.
		but maybe we're missing the range defined in the km command. I know some effect_presets definitions in ecasound can have a defined range with the ppl and ppu opcode, can nama grab these and use them for the range ?
	Hmm, I never tried. Nama does pick up some hinting information from LADSPA effects to help generate GUI scrollbars for effect parameters. And has a file, ecasound_chain_operator_hints.yml, with hints for Ecasound's effects.
+ have a "send with a gain control".
	So, how would you trim the levels? You would need a special command:
		select_bus ear1
		trim guitar - 3
	Right now, we just do this:
		ear1-guitar vol - 3
	>>this command is short and good
+ confirm status changes to track settings
	rec/mon/live(on)/off ?
	remove rec_enable/rec_defeat commands ?
	> rec/mon/play/off ?
+ lock_engine, create engine when necessary ?
+ Still to do:
	1. Operating modes
	2. Respecting engine autonomy
	3. Synchronizing Nama with engine state
+ personal mixes
	"User" refers to a send bus.
		I think "user" is the right term to describe a custom mix that a send bus provides for a particular musician, a front-of-house system, etc.
	>>i would prefer "submix" in reference the mixdown and master track
	>> a way to control the whole submix volume ?
	>>generic adressing of subtrack with busname:trackname
+ effects nicknames
	
********************
 MEMO COMMANDS
********************
To get the precise state of the engine, you can use the IAM command "cs-save-as full-setup.ecs".

Live mode ($mode->live, your preferred initial mode) results when $mode->eager and $mode->doodle are set.
Song mode ($mode->song, for a performance or rehearsal) results when $mode->eager and $mode->preview are set.
When you have some tracks set to MON for backing, and are ready start the song, type "preview".[1]

TCP socket : in namarc : remote_control_port: 57121

eval $this_track->name
echo '$this_track->name' | nc locahost 57121
	single quotes guarantees good $ evaluation

	Nama maintains some shortcut indices for getting objects.
		$bn{Main}      $::Bus::by_name{Main}
		$tn{Master}    $::Track::by_name{Master}
		$ti{1}         $::Track::by_index{1}
		$mn{start}     $::Mark::by_name{start}
		fxn('AC')      # an Effect object
	And we are about to add:
		$en{foh}       $::Engine::by_name{foh}
	There are also some global variables
		($config, $project, $setup, etc.)
		containing important project state. 
		See the file singletons.pl for the full list.
	You can inspect them (or any other object) from the command	line like this:
		eval $config
	Once you see the attribute you want, you can just get it by a hash access. (Not all the singletons have accessors.)
		$config->{project_root}	
	And you also have "current" objects (listed in pronouns.pl)
		$this_track
		$this_bus  # name, not object
		$this_mark
		$this_edit
		$this_sequence
		$this_engine
	If you want to know the current rec_status of a track, you'll need to use this:
		$this_track->rec_status
		Since rec_status() is a track method, it is defined in in Track.p (the source for Track.pm).
	eval \%Audio::Nama::Engine::by_name
 		engine object
 	eval $this_track->engine_group
 		wich engine is assigned to this track
+ multiple engines
	'engine_group' is a new field for tracks and buses.
	$track->engine_group returns:
	  * The engine group of the bus, if it exists
	  * The engine group of the track, if it exists
	  * 'default'
	new_engine foo 5678 # start or bind to Ecasound on port 5678
						# foo is the current engine
	select_engine default # default is the current engine
	set_track_engine_group foo # track status is forced OFF
	set_bus_engine_group default # forces track engine_group to default

	asbc in_ear_monitor 7
	# Create a "cooked" send bus named "in_ear_monitor"
	# with output at soundcard 7/8

	user in_ear_monitor
	# Select the user (bus)

	trim eadb 1 - 3
	# Reduce by 3dB parameter 1 of the first-occurring eadb effect on
	# in_ear_monitor's tap of current track

	bass trim gverb 2 25
	# Adjust the bass track in the mix.
	# Set parameter 2 of the first "gverb" effect to 25.

+ main submix volume
	for foh; vol - 3
		
********************
 CONSIDERATIONS
********************
Nama adds effects dynamically, so the chain setups only show the routing.
Nama is somewhat stereo-oriented. Mono sources get copied to stereo for panning, although that can be suppressed.